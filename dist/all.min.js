/**
 * [Controller] is middleware between [View] and [Model]
 * if DOM Event needs data from AJAX, then [View] will emit
 * [Controller] Function and [Controller] will call [Model]
 * and Once it gets the data some callback will be invoked
 * to render the data on DOM
 */
 /*global View, Model, SideNav*/
(function(window){
	window.Controller = Stapes.subclass({
		// Initiate [Model] and [View]
		constructor: function () {
			window.controller = this;
			this.view = new View();
			this.model = new Model();

			this.bindViewHandlers();
			this.bindModelHandlers();
		},

		/**
		 * Contails all methods that will be excuted from [View], it will:
		 * 	- Initiate all network calls requested by DOM
		 *  	- A hook which will capture response from AJAX
		 */
		bindViewHandlers : function() {
			var that = this;

			this.view.on({
				/**
				 * [viewName] change will help in page view change,
				 * as soon as [viewName] gets changed from [Routes],
				 * A method will run accordingly, currently we just have 1
				 * route, but new routes will be added later on.
				 */
				'change:viewName': function(viewName){
					if(viewName === 'landing'){
						that.view.emit('renderThumbs');
						that.view.bindEvents();
					}
				},

				/**
				 * Fetches next set of thumbnails from network and
				 * when gets the data, calls a [View]'s method [render]
				 * to populate the data.
				 * For the first time, this will be executed by [Controller],
				 * later on it will be emited by [View], when user scrolls down
				 * @return {[type]} [description]
				 */
				renderThumbs: function (tag) {
					var viewData = that.view.getAll(),
						obj, imagesXHR;

					if(!!!tag){
						obj = {
							page: viewData.page,
							api: viewData.api,
							count: viewData.pageSize
						};
						imagesXHR = that.model.getLandingPageViewData(obj);
					}else{
						obj = {
							page: viewData.page,
							api: viewData.api,
							count: viewData.pageSize,
							tag: tag
						};
						imagesXHR = that.model.getImagesByTags(obj);
					}
					that.view.set('newtwork', true);

					$.when(imagesXHR).done(function (response) {
						if(response && response.stat === "ok"){
							that.view.set('page', (response.photos.page + 1));
							response.photos.isTagSearch = !!tag ? true : false;
							that.view.render.call(that.view, response.photos);
						}
					});
				},
			});
		},
		// write model events here.
		bindModelHandlers: function () {
			this.model.on({
			});
		}
	});
})(window);
/**
 * Model will fetch data from  server/backend.
 * All funcitons inside this class should be accessed from
 * [Controller] and once the data is fetched, this will emit
 * related [Controller] funcitons.
 */
 /*global BanksViewScript,ContactViewScript,TransactionsViewScript,CardsViewScript,CardsViewScript,BanksViewScript,ContactViewScript,CashViewScript,ProfileViewScript,VirtualCardViewScript*/
var Model = new Stapes.subclass({
	constructor : function () {
		console.log("Loading Models");
	},
	// sends request for next set of phots and returns a promise
	getLandingPageViewData: function (obj) {
		var url = "https://api.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key="+ obj.api +"&per_page="+ obj.count +"&page="+ obj.page +"&format=json&nojsoncallback=1&extras=tags";
		return $.ajax({
			url: url,
			type: 'GET'
		});
	},
	getImagesByTags: function (obj) {
		var url = "https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=" + obj.api + "&tags=" + obj.tag + "&format=json&nojsoncallback=1&extras=tags&per_page="+ obj.count +"&page="+ obj.page;
		return $.ajax({
			url: url,
			type: 'GET'
		});
	}
});
/**
 * Utility funcition to populate the data in container.
 * @param  {String} tplName  -- name of template to be rendered
 * @param  {Object} viewData -- data to be passed through template
 * @param  {Boolean} append   OPTIONAL -- send this as true if need to append
 * the data instead of clear previous.
 * @param  {DOM Element} el -- OPTIONAL -- Container to which data will be appended
 * by default [el] will be $("#images")
 */
window.renderTpl = function(tplName, viewData, append, el){
	var tpl = window.templates[tplName] || window.partials[tplName];
	var targetEl = el ? $(el) : $("#images");
	if(tpl && targetEl ){
		if(!append){
			targetEl.html("").html(tpl(viewData));
		}else{
			targetEl.append(tpl(viewData));
		}
	}
};
/**
 * Using [page.js] for routing
 * This function will initiate and bind routing paths
 * We are using [express] like routing aproach, there will
 * be different function call on route change.
 */
function initRoutes () {
	var routes = {
		landing : function(context, next){
			var viewName = window.controller.view.get('viewName');
			if(viewName === 'landing'){
				window.controller.view.set('viewName', 'home');
			}
			else{
				window.controller.view.set('viewName', 'landing');
			}
		}
		/* -- Create new functions according to page, so that every page will have it's own section of routing -- */
	};

	// Set base URL, all paths will include the base path
	page('/', routes.landing);
	/* add more routes here */
	page();
}
/**
 * View Class will handle view change and attach
 * the appropriate handlers to DOM
 * This will have `Hnadlebars` helper funcitons and
 * Default view data object
 */
var View = new Stapes.subclass({
	// Add Handlebars helpers and setup initial state of the data
	constructor : function(){
		this.setupViewData();
		this.setupHandlebars();
	},
	// setup initial state of application
	setupViewData: function () {
		this.set({
			viewName: undefined,
			api: "8646a19eac46052be355f18b48678972",
			pageSize: 30,
			page: 1,
			images: [],
			newtwork: false,
			tags: {},
			filter: null
		});
	},

	// Handlebar settings, sets helpers and will register partials if needed in future.
	setupHandlebars: function () {

		/**
		 * This will:
		 * 	- Update `controller.view.tags`
		 * 	- Remove special chars from tags, so that it will be easier to filter
		 * 	- Return  tags space seprated
		 */
		Handlebars.registerHelper("makeTags", function(context, options){
			var tags = window.controller.view.get('tags');
			var temp;
			if(context.length > 0){
				temp = (context.replace(/[^A-Z0-9\s]/ig, "")).split(" ");
				for(var i = 0, l = temp.length; i < l; i++){
					if(temp[i].length > 14){
						temp[i] = temp[i].slice(0, 14);
					}
					if(tags[temp[i]]){
						if(tags[temp[i]] < 36)
							tags[temp[i]] +=1;
					}else{
						tags[temp[i]] = 1;
					}
				}

				window.controller.view.set('tags', tags);
				return temp.join(" ");
			}
			return temp;
		});

		// Handles all arithmetical operations.
		Handlebars.registerHelper("math", function(lvalue, operator, rvalue, options){
			lvalue = parseFloat(lvalue);
			rvalue = parseFloat(rvalue);

			return {
				"+": lvalue + rvalue,
				"-": lvalue - rvalue,
				"*": lvalue * rvalue,
				"/": lvalue / rvalue,
				"%": lvalue % rvalue
			}[operator];
		});

		// basically Handlebars way to say if `lvalue` > `rvalue`
		Handlebars.registerHelper("gt", function (lvalue, rvalue, options) {
			if(lvalue > rvalue){
				return options.fn(this);
			}
			return options.inverse(this);
		});
	},

	/**
	 * Appends new thumbnail to images container, also takes care of:
	 * 	- Appending new tags
	 * 	- Showing filtered thumbnails
	 * @param  {Object} data -- photo object returned by flickr API
	 */
	render: function (data) {
		// Don't clean up the image container if page is greater than 1
		var append = (data.page > 1) ? true : false;

		// [renderTpl] is present in `render.js` file, utility to render
		// handlebars template
		renderTpl('thumbnail', {photos: data.photo}, append);

		// Don't send network request if already a network call is in the process
		this.set('newtwork', false);

		// Lazy loading images
		this.loadImg();
		this.updateTags();

		// filter if tag is clicked
		if(!data.isTagSearch){
			this.handleThumbs(this.get('filter'));
		}
	},

	// Binds DOM events
	bindEvents: function(){
		var that = this;
		$(".tags").on("click", "span", function (e) {
			that.set("tags", {});
			that.set("page", 1);
			that.handleThumbs($(this).html());
		});
		$(window).scroll(function () {
			// if thumbs are less than 2000 and no network call is going on
			if(!that.get('newtwork') && that.get('page') < 68){
				// If Second last row  shows up on the screen, AJAX will be Fired
				if(($(window).scrollTop() + $(window).height()) > ($('.tags').outerHeight() + $(".images").outerHeight() - 450)){
					that.emit('renderThumbs', that.get("filter"));
				}
			}
		});
	},

	// Lazy load image and add transtion when image loads
	loadImg: function () {
		[].forEach.call(document.querySelectorAll('img[data-src]'), function(img) {
			img.setAttribute('src', img.getAttribute('data-src'));
			img.onload = function() {
				img.removeAttribute('data-src');
			};
		});
	},

	// Helper to render new tags
	updateTags: function () {
		renderTpl('tags', {tags: window.controller.view.get('tags')}, false, $(".tags"));
	},

	// Show thumbnails according to filter of tag
	handleThumbs: function(tag){
		var that = this;
		if(tag){
			var $thumbs = $(".thumb");

			$thumbs.hide();
			$thumbs.filter("." + tag).show();
			console.log($thumbs.filter("." + tag).length);
			that.set("filter", tag);
			that.emit('renderThumbs', tag);
		}
	}
});